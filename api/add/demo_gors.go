// Code generated by "gors -service Demo"; DO NOT EDIT.
package add

import (
	io "io"
	"strconv"
)
import gors "github.com/go-leo/gors"
import http "net/http"
import gin "github.com/gin-gonic/gin"
import render "github.com/gin-gonic/gin/render"
import binding "github.com/gin-gonic/gin/binding"

func DemoRouters(srv Demo) []gors.Router {
	return []gors.Router{
		{
			HTTPMethod: http.MethodGet,
			Path:       "/api/add/GetBytesBytes",
			HandlerFunc: func(c *gin.Context) {
				var req = []byte{}
				resp, err := srv.GetBytesBytes(c.Request.Context(), req)
				if err != nil {
					if httpErr, ok := err.(*gors.HttpError); ok {
						c.String(httpErr.StatusCode(), httpErr.Error())
						return
					}
					c.String(http.StatusInternalServerError, err.Error())
					return
				}
				c.Render(http.StatusOK, render.Data{ContentType: "text/go", Data: resp})
			},
		},
		{
			HTTPMethod: http.MethodPost,
			Path:       "/api/add/PostBytesBytes",
			HandlerFunc: func(c *gin.Context) {
				body, err := io.ReadAll(c.Request.Body)
				if err != nil {
					c.String(http.StatusBadRequest, err.Error())
					_ = c.Error(err).SetType(gin.ErrorTypeBind)
					return
				}
				req := body
				resp, err := srv.PostBytesBytes(c.Request.Context(), req)
				if err != nil {
					if httpErr, ok := err.(*gors.HttpError); ok {
						c.String(httpErr.StatusCode(), httpErr.Error())
						return
					}
					c.String(http.StatusInternalServerError, err.Error())
					return
				}
				c.Render(http.StatusOK, render.Data{ContentType: "text/go", Data: resp})
			},
		},
		{
			HTTPMethod: http.MethodGet,
			Path:       "/api/add/GetStringString",
			HandlerFunc: func(c *gin.Context) {
				var req string
				resp, err := srv.GetStringString(c.Request.Context(), req)
				if err != nil {
					if httpErr, ok := err.(*gors.HttpError); ok {
						c.String(httpErr.StatusCode(), httpErr.Error())
						return
					}
					c.String(http.StatusInternalServerError, err.Error())
					return
				}
				c.Render(http.StatusOK, render.Data{ContentType: "text/go", Data: []byte(resp)})
			},
		},
		{
			HTTPMethod: http.MethodPost,
			Path:       "/api/add/PostStringString",
			HandlerFunc: func(c *gin.Context) {
				body, err := io.ReadAll(c.Request.Body)
				if err != nil {
					c.String(http.StatusBadRequest, err.Error())
					_ = c.Error(err).SetType(gin.ErrorTypeBind)
					return
				}
				req := string(body)
				resp, err := srv.PostStringString(c.Request.Context(), req)
				if err != nil {
					if httpErr, ok := err.(*gors.HttpError); ok {
						c.String(httpErr.StatusCode(), httpErr.Error())
						return
					}
					c.String(http.StatusInternalServerError, err.Error())
					return
				}
				c.Render(http.StatusOK, render.Data{ContentType: "text/go", Data: []byte(resp)})
			},
		},
		{
			HTTPMethod: http.MethodGet,
			Path:       "/api/add/GetReaderReader",
			HandlerFunc: func(c *gin.Context) {
				body := c.Request.Body
				req := body
				resp, err := srv.GetReaderReader(c.Request.Context(), req)
				if err != nil {
					if httpErr, ok := err.(*gors.HttpError); ok {
						c.String(httpErr.StatusCode(), httpErr.Error())
						return
					}
					c.String(http.StatusInternalServerError, err.Error())
					return
				}
				c.Render(http.StatusOK, render.Reader{ContentType: "", ContentLength: 0, Reader: resp, Headers: nil})
			},
		},
		{
			HTTPMethod: http.MethodPost,
			Path:       "/api/add/PostReaderReader",
			HandlerFunc: func(c *gin.Context) {
				body := c.Request.Body
				req := body
				resp, err := srv.PostReaderReader(c.Request.Context(), req)
				if err != nil {
					if httpErr, ok := err.(*gors.HttpError); ok {
						c.String(httpErr.StatusCode(), httpErr.Error())
						return
					}
					c.String(http.StatusInternalServerError, err.Error())
					return
				}
				c.Render(http.StatusOK, render.Reader{ContentType: "", ContentLength: 0, Reader: resp, Headers: nil})
			},
		},
		{
			HTTPMethod: http.MethodGet,
			Path:       "/api/add/GetBytesString",
			HandlerFunc: func(c *gin.Context) {
				var req = []byte{}
				resp, err := srv.GetBytesString(c.Request.Context(), req)
				if err != nil {
					if httpErr, ok := err.(*gors.HttpError); ok {
						c.String(httpErr.StatusCode(), httpErr.Error())
						return
					}
					c.String(http.StatusInternalServerError, err.Error())
					return
				}
				c.Render(http.StatusOK, render.Data{ContentType: "text/html; charset=utf-8", Data: []byte(resp)})
			},
		},
		{
			HTTPMethod: http.MethodPost,
			Path:       "/api/add/PostBytesString",
			HandlerFunc: func(c *gin.Context) {
				body, err := io.ReadAll(c.Request.Body)
				if err != nil {
					c.String(http.StatusBadRequest, err.Error())
					_ = c.Error(err).SetType(gin.ErrorTypeBind)
					return
				}
				req := body
				resp, err := srv.PostBytesString(c.Request.Context(), req)
				if err != nil {
					if httpErr, ok := err.(*gors.HttpError); ok {
						c.String(httpErr.StatusCode(), httpErr.Error())
						return
					}
					c.String(http.StatusInternalServerError, err.Error())
					return
				}
				c.Render(http.StatusOK, render.Redirect{Code: 0, Request: c.Request, Location: strconv.Quote(resp)})
			},
		},
		{
			HTTPMethod: http.MethodGet,
			Path:       "/api/add/GetBytesReader",
			HandlerFunc: func(c *gin.Context) {
				var req = []byte{}
				resp, err := srv.GetBytesReader(c.Request.Context(), req)
				if err != nil {
					if httpErr, ok := err.(*gors.HttpError); ok {
						c.String(httpErr.StatusCode(), httpErr.Error())
						return
					}
					c.String(http.StatusInternalServerError, err.Error())
					return
				}
				c.Render(http.StatusOK, render.Reader{ContentType: "video/mpeg4", ContentLength: 0, Reader: resp, Headers: nil})
			},
		},
		{
			HTTPMethod: http.MethodPost,
			Path:       "/api/add/PostBytesReader",
			HandlerFunc: func(c *gin.Context) {
				body, err := io.ReadAll(c.Request.Body)
				if err != nil {
					c.String(http.StatusBadRequest, err.Error())
					_ = c.Error(err).SetType(gin.ErrorTypeBind)
					return
				}
				req := body
				resp, err := srv.PostBytesReader(c.Request.Context(), req)
				if err != nil {
					if httpErr, ok := err.(*gors.HttpError); ok {
						c.String(httpErr.StatusCode(), httpErr.Error())
						return
					}
					c.String(http.StatusInternalServerError, err.Error())
					return
				}
				c.Render(http.StatusOK, render.Reader{ContentType: "video/mpeg4", ContentLength: 0, Reader: resp, Headers: nil})
			},
		},
		{
			HTTPMethod: http.MethodGet,
			Path:       "/api/add/GetStringBytes",
			HandlerFunc: func(c *gin.Context) {
				var req string
				resp, err := srv.GetStringBytes(c.Request.Context(), req)
				if err != nil {
					if httpErr, ok := err.(*gors.HttpError); ok {
						c.String(httpErr.StatusCode(), httpErr.Error())
						return
					}
					c.String(http.StatusInternalServerError, err.Error())
					return
				}
				c.Render(http.StatusOK, render.Data{ContentType: "text/html; charset=utf-8", Data: resp})
			},
		},
		{
			HTTPMethod: http.MethodPost,
			Path:       "/api/add/PostStringBytes",
			HandlerFunc: func(c *gin.Context) {
				body, err := io.ReadAll(c.Request.Body)
				if err != nil {
					c.String(http.StatusBadRequest, err.Error())
					_ = c.Error(err).SetType(gin.ErrorTypeBind)
					return
				}
				req := string(body)
				resp, err := srv.PostStringBytes(c.Request.Context(), req)
				if err != nil {
					if httpErr, ok := err.(*gors.HttpError); ok {
						c.String(httpErr.StatusCode(), httpErr.Error())
						return
					}
					c.String(http.StatusInternalServerError, err.Error())
					return
				}
				c.Render(http.StatusOK, render.Redirect{Code: 0, Request: c.Request, Location: strconv.Quote(string(resp))})
			},
		},
		{
			HTTPMethod: http.MethodGet,
			Path:       "/api/add/GetStringRender",
			HandlerFunc: func(c *gin.Context) {
				var req string
				resp, err := srv.GetStringRender(c.Request.Context(), req)
				if err != nil {
					if httpErr, ok := err.(*gors.HttpError); ok {
						c.String(httpErr.StatusCode(), httpErr.Error())
						return
					}
					c.String(http.StatusInternalServerError, err.Error())
					return
				}
				c.Render(http.StatusOK, render.Reader{ContentType: "video/mpeg4", ContentLength: 0, Reader: resp, Headers: nil})
			},
		},
		{
			HTTPMethod: http.MethodPost,
			Path:       "/api/add/PostStringReader",
			HandlerFunc: func(c *gin.Context) {
				body, err := io.ReadAll(c.Request.Body)
				if err != nil {
					c.String(http.StatusBadRequest, err.Error())
					_ = c.Error(err).SetType(gin.ErrorTypeBind)
					return
				}
				req := string(body)
				resp, err := srv.PostStringReader(c.Request.Context(), req)
				if err != nil {
					if httpErr, ok := err.(*gors.HttpError); ok {
						c.String(httpErr.StatusCode(), httpErr.Error())
						return
					}
					c.String(http.StatusInternalServerError, err.Error())
					return
				}
				c.Render(http.StatusOK, render.Reader{ContentType: "video/mpeg4", ContentLength: 0, Reader: resp, Headers: nil})
			},
		},
		{
			HTTPMethod: http.MethodGet,
			Path:       "/api/add/GetReaderBytes",
			HandlerFunc: func(c *gin.Context) {
				body := c.Request.Body
				req := body
				resp, err := srv.GetReaderBytes(c.Request.Context(), req)
				if err != nil {
					if httpErr, ok := err.(*gors.HttpError); ok {
						c.String(httpErr.StatusCode(), httpErr.Error())
						return
					}
					c.String(http.StatusInternalServerError, err.Error())
					return
				}
				c.Render(http.StatusOK, render.Data{ContentType: "text/plain; charset=utf-8", Data: resp})
			},
		},
		{
			HTTPMethod: http.MethodPost,
			Path:       "/api/add/PostReaderBytes",
			HandlerFunc: func(c *gin.Context) {
				body := c.Request.Body
				req := body
				resp, err := srv.PostReaderBytes(c.Request.Context(), req)
				if err != nil {
					if httpErr, ok := err.(*gors.HttpError); ok {
						c.String(httpErr.StatusCode(), httpErr.Error())
						return
					}
					c.String(http.StatusInternalServerError, err.Error())
					return
				}
				c.Render(http.StatusOK, render.Data{ContentType: "image/png", Data: resp})
			},
		},
		{
			HTTPMethod: http.MethodGet,
			Path:       "/api/add/GetReaderString",
			HandlerFunc: func(c *gin.Context) {
				body := c.Request.Body
				req := body
				resp, err := srv.GetReaderString(c.Request.Context(), req)
				if err != nil {
					if httpErr, ok := err.(*gors.HttpError); ok {
						c.String(httpErr.StatusCode(), httpErr.Error())
						return
					}
					c.String(http.StatusInternalServerError, err.Error())
					return
				}
				c.Render(http.StatusOK, render.Data{ContentType: "text/plain; charset=utf-8", Data: []byte(resp)})
			},
		},
		{
			HTTPMethod: http.MethodPost,
			Path:       "/api/add/PostReaderString",
			HandlerFunc: func(c *gin.Context) {
				body := c.Request.Body
				req := body
				resp, err := srv.PostReaderString(c.Request.Context(), req)
				if err != nil {
					if httpErr, ok := err.(*gors.HttpError); ok {
						c.String(httpErr.StatusCode(), httpErr.Error())
						return
					}
					c.String(http.StatusInternalServerError, err.Error())
					return
				}
				c.Render(http.StatusOK, render.Data{ContentType: "text/go", Data: []byte(resp)})
			},
		},
		{
			HTTPMethod: http.MethodGet,
			Path:       "/api/add/UriBinding/:id",
			HandlerFunc: func(c *gin.Context) {
				req := new(UriBindingRequest)
				if err := c.BindUri(req); err != nil {
					c.String(http.StatusBadRequest, err.Error())
					_ = c.Error(err).SetType(gin.ErrorTypeBind)
					return
				}
				resp, err := srv.UriBinding(c.Request.Context(), req)
				if err != nil {
					if httpErr, ok := err.(*gors.HttpError); ok {
						c.String(httpErr.StatusCode(), httpErr.Error())
						return
					}
					c.String(http.StatusInternalServerError, err.Error())
					return
				}
				c.Render(http.StatusOK, render.IndentedJSON{Data: resp})
			},
		},
		{
			HTTPMethod: http.MethodGet,
			Path:       "/api/add/QueryBinding",
			HandlerFunc: func(c *gin.Context) {
				req := new(QueryBindingRequest)
				if err := c.ShouldBindWith(req, binding.Query); err != nil {
					c.String(http.StatusBadRequest, err.Error())
					_ = c.Error(err).SetType(gin.ErrorTypeBind)
					return
				}
				resp, err := srv.QueryBinding(c.Request.Context(), req)
				if err != nil {
					if httpErr, ok := err.(*gors.HttpError); ok {
						c.String(httpErr.StatusCode(), httpErr.Error())
						return
					}
					c.String(http.StatusInternalServerError, err.Error())
					return
				}
				c.Render(http.StatusOK, render.IndentedJSON{Data: resp})
			},
		},
		{
			HTTPMethod: http.MethodGet,
			Path:       "/api/add/HeaderBinding",
			HandlerFunc: func(c *gin.Context) {
				req := new(HeaderBindingRequest)
				if err := c.ShouldBindWith(req, binding.Header); err != nil {
					c.String(http.StatusBadRequest, err.Error())
					_ = c.Error(err).SetType(gin.ErrorTypeBind)
					return
				}
				resp, err := srv.HeaderBinding(c.Request.Context(), req)
				if err != nil {
					if httpErr, ok := err.(*gors.HttpError); ok {
						c.String(httpErr.StatusCode(), httpErr.Error())
						return
					}
					c.String(http.StatusInternalServerError, err.Error())
					return
				}
				callback := c.DefaultQuery("callback", "")
				if callback == "" {
					c.Render(http.StatusOK, render.JSON{Data: resp})
					return
				}
				c.Render(http.StatusOK, render.JsonpJSON{Callback: callback, Data: resp})
			},
		},
		{
			HTTPMethod: http.MethodGet,
			Path:       "/api/add/JSONBinding",
			HandlerFunc: func(c *gin.Context) {
				req := new(JSONBindingRequest)
				if err := c.ShouldBindWith(req, binding.JSON); err != nil {
					c.String(http.StatusBadRequest, err.Error())
					_ = c.Error(err).SetType(gin.ErrorTypeBind)
					return
				}
				resp, err := srv.JSONBinding(c.Request.Context(), req)
				if err != nil {
					if httpErr, ok := err.(*gors.HttpError); ok {
						c.String(httpErr.StatusCode(), httpErr.Error())
						return
					}
					c.String(http.StatusInternalServerError, err.Error())
					return
				}
				c.Render(http.StatusOK, render.JSON{Data: resp})
			},
		},
		{
			HTTPMethod: http.MethodGet,
			Path:       "/api/add/XMLBinding",
			HandlerFunc: func(c *gin.Context) {
				req := new(XMLBindingRequest)
				if err := c.ShouldBindWith(req, binding.XML); err != nil {
					c.String(http.StatusBadRequest, err.Error())
					_ = c.Error(err).SetType(gin.ErrorTypeBind)
					return
				}
				resp, err := srv.XMLBinding(c.Request.Context(), req)
				if err != nil {
					if httpErr, ok := err.(*gors.HttpError); ok {
						c.String(httpErr.StatusCode(), httpErr.Error())
						return
					}
					c.String(http.StatusInternalServerError, err.Error())
					return
				}
				c.Render(http.StatusOK, render.XML{Data: resp})
			},
		},
		{
			HTTPMethod: http.MethodGet,
			Path:       "/api/add/FormBinding",
			HandlerFunc: func(c *gin.Context) {
				req := new(FormBindingRequest)
				if err := c.ShouldBindWith(req, binding.Form); err != nil {
					c.String(http.StatusBadRequest, err.Error())
					_ = c.Error(err).SetType(gin.ErrorTypeBind)
					return
				}
				resp, err := srv.FormBinding(c.Request.Context(), req)
				if err != nil {
					if httpErr, ok := err.(*gors.HttpError); ok {
						c.String(httpErr.StatusCode(), httpErr.Error())
						return
					}
					c.String(http.StatusInternalServerError, err.Error())
					return
				}
				callback := c.DefaultQuery("callback", "")
				if callback == "" {
					c.Render(http.StatusOK, render.JSON{Data: resp})
					return
				}
				c.Render(http.StatusOK, render.JsonpJSON{Callback: callback, Data: resp})
			},
		},
		{
			HTTPMethod: http.MethodGet,
			Path:       "/api/add/FormPostBinding",
			HandlerFunc: func(c *gin.Context) {
				req := new(FormPostBindingRequest)
				if err := c.ShouldBindWith(req, binding.FormPost); err != nil {
					c.String(http.StatusBadRequest, err.Error())
					_ = c.Error(err).SetType(gin.ErrorTypeBind)
					return
				}
				resp, err := srv.FormPostBinding(c.Request.Context(), req)
				if err != nil {
					if httpErr, ok := err.(*gors.HttpError); ok {
						c.String(httpErr.StatusCode(), httpErr.Error())
						return
					}
					c.String(http.StatusInternalServerError, err.Error())
					return
				}
				c.Render(http.StatusOK, render.PureJSON{Data: resp})
			},
		},
		{
			HTTPMethod: http.MethodGet,
			Path:       "/api/add/FormMultipartBinding",
			HandlerFunc: func(c *gin.Context) {
				req := new(FormMultipartBindingRequest)
				if err := c.ShouldBindWith(req, binding.FormMultipart); err != nil {
					c.String(http.StatusBadRequest, err.Error())
					_ = c.Error(err).SetType(gin.ErrorTypeBind)
					return
				}
				resp, err := srv.FormMultipartBinding(c.Request.Context(), req)
				if err != nil {
					if httpErr, ok := err.(*gors.HttpError); ok {
						c.String(httpErr.StatusCode(), httpErr.Error())
						return
					}
					c.String(http.StatusInternalServerError, err.Error())
					return
				}
				c.Render(http.StatusOK, render.AsciiJSON{Data: resp})
			},
		},
		{
			HTTPMethod: http.MethodGet,
			Path:       "/api/add/ProtoBufBinding",
			HandlerFunc: func(c *gin.Context) {
				req := new(ProtoBufBindingRequest)
				if err := c.ShouldBindWith(req, binding.ProtoBuf); err != nil {
					c.String(http.StatusBadRequest, err.Error())
					_ = c.Error(err).SetType(gin.ErrorTypeBind)
					return
				}
				resp, err := srv.ProtoBufBinding(c.Request.Context(), req)
				if err != nil {
					if httpErr, ok := err.(*gors.HttpError); ok {
						c.String(httpErr.StatusCode(), httpErr.Error())
						return
					}
					c.String(http.StatusInternalServerError, err.Error())
					return
				}
				c.Render(http.StatusOK, render.ProtoBuf{Data: resp})
			},
		},
		{
			HTTPMethod: http.MethodGet,
			Path:       "/api/add/MsgPackBinding",
			HandlerFunc: func(c *gin.Context) {
				req := new(MsgPackBindingRequest)
				if err := c.ShouldBindWith(req, binding.MsgPack); err != nil {
					c.String(http.StatusBadRequest, err.Error())
					_ = c.Error(err).SetType(gin.ErrorTypeBind)
					return
				}
				resp, err := srv.MsgPackBinding(c.Request.Context(), req)
				if err != nil {
					if httpErr, ok := err.(*gors.HttpError); ok {
						c.String(httpErr.StatusCode(), httpErr.Error())
						return
					}
					c.String(http.StatusInternalServerError, err.Error())
					return
				}
				c.Render(http.StatusOK, render.MsgPack{Data: resp})
			},
		},
		{
			HTTPMethod: http.MethodGet,
			Path:       "/api/add/YAMLBinding",
			HandlerFunc: func(c *gin.Context) {
				req := new(YAMLBindingRequest)
				if err := c.ShouldBindWith(req, binding.YAML); err != nil {
					c.String(http.StatusBadRequest, err.Error())
					_ = c.Error(err).SetType(gin.ErrorTypeBind)
					return
				}
				resp, err := srv.YAMLBinding(c.Request.Context(), req)
				if err != nil {
					if httpErr, ok := err.(*gors.HttpError); ok {
						c.String(httpErr.StatusCode(), httpErr.Error())
						return
					}
					c.String(http.StatusInternalServerError, err.Error())
					return
				}
				c.Render(http.StatusOK, render.YAML{Data: resp})
			},
		},
		{
			HTTPMethod: http.MethodGet,
			Path:       "/api/add/TOMLBinding",
			HandlerFunc: func(c *gin.Context) {
				req := new(TOMLBindingRequest)
				if err := c.ShouldBindWith(req, binding.TOML); err != nil {
					c.String(http.StatusBadRequest, err.Error())
					_ = c.Error(err).SetType(gin.ErrorTypeBind)
					return
				}
				code := http.StatusOK
				ctx := c.Request.Context()

				resp, err := srv.TOMLBinding(context, req)
				if err != nil {
					if httpErr, ok := err.(*gors.HttpError); ok {
						c.String(httpErr.StatusCode(), httpErr.Error())
						return
					}
					c.String(http.StatusInternalServerError, err.Error())
					return
				}
				c.Render(http.StatusOK, render.TOML{Data: resp})
			},
		},
	}
}
