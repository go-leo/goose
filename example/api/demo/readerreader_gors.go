// Code generated by "gors -service ReaderReader"; DO NOT EDIT.

package demo

import (
	gin "github.com/gin-gonic/gin"
	gors "github.com/go-leo/gors"
	io "io"
	http "net/http"
)

func ReaderReaderRoutes(srv ReaderReader, opts ...gors.Option) []gors.Route {
	options := gors.NewOptions(opts...)
	return []gors.Route{
		gors.NewRoute(http.MethodGet, "/api/ReaderReader/Get", _ReaderReader_GetReaderReader_Handler(srv, options)),
		gors.NewRoute(http.MethodHead, "/api/ReaderReader/head", _ReaderReader_HeadReaderReader_Handler(srv, options)),
	}
}

func _ReaderReader_GetReaderReader_Handler(srv ReaderReader, options *gors.Options) func(c *gin.Context) {
	return func(c *gin.Context) {
		var rpcMethodName = "/demo.ReaderReader/GetReaderReader"
		var ctx = gors.NewContext(c, rpcMethodName)
		var req io.Reader
		var resp io.Reader
		var err error
		if err = gors.RequestBind(
			ctx, &req, options.Tag,
			gors.ReaderBinding,
		); err != nil {
			gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
			return
		}
		resp, err = srv.GetReaderReader(ctx, req)
		if err != nil {
			gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
			return
		}
		gors.ResponseRender(ctx, gors.StatusCode(ctx), resp, "", gors.ReaderRender, options.ResponseWrapper)
	}
}

func _ReaderReader_HeadReaderReader_Handler(srv ReaderReader, options *gors.Options) func(c *gin.Context) {
	return func(c *gin.Context) {
		var rpcMethodName = "/demo.ReaderReader/HeadReaderReader"
		var ctx = gors.NewContext(c, rpcMethodName)
		var req io.Reader
		var resp io.Reader
		var err error
		if err = gors.RequestBind(
			ctx, &req, options.Tag,
			gors.ReaderBinding,
		); err != nil {
			gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
			return
		}
		resp, err = srv.HeadReaderReader(ctx, req)
		if err != nil {
			gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
			return
		}
		gors.ResponseRender(ctx, gors.StatusCode(ctx), resp, "video/mp4", gors.ReaderRender, options.ResponseWrapper)
	}
}
