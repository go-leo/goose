// Code generated by protoc-gen-goose. DO NOT EDIT.

package user

import (
	context "context"
	goose "github.com/go-leo/goose"
	protojson "google.golang.org/protobuf/encoding/protojson"
	http "net/http"
)

type UserGooseService interface {
	CreateUser(ctx context.Context, request *CreateUserRequest) (*CreateUserResponse, error)
	DeleteUser(ctx context.Context, request *DeleteUserRequest) (*DeleteUserResponse, error)
	ModifyUser(ctx context.Context, request *ModifyUserRequest) (*ModifyUserResponse, error)
	UpdateUser(ctx context.Context, request *UpdateUserRequest) (*UpdateUserResponse, error)
	GetUser(ctx context.Context, request *GetUserRequest) (*GetUserResponse, error)
	ListUser(ctx context.Context, request *ListUserRequest) (*ListUserResponse, error)
}

func AppendUserGooseRoute(router *http.ServeMux, service UserGooseService, opts ...goose.Option) *http.ServeMux {
	options := goose.NewOptions(opts...)
	handler := userGooseHandler{
		service: service,
		decoder: userGooseRequestDecoder{
			unmarshalOptions: options.UnmarshalOptions(),
		},
		encoder: userGooseResponseEncoder{
			marshalOptions:      options.MarshalOptions(),
			unmarshalOptions:    options.UnmarshalOptions(),
			responseTransformer: options.ResponseTransformer(),
		},
		errorEncoder:            goose.DefaultEncodeError,
		shouldFailFast:          options.ShouldFailFast(),
		onValidationErrCallback: options.OnValidationErrCallback(),
	}
	router.Handle("POST /v1/user", goose.Chain(handler.CreateUser(), options.Middlewares()...))
	router.Handle("DELETE /v1/user/{id}", goose.Chain(handler.DeleteUser(), options.Middlewares()...))
	router.Handle("PUT /v1/user/{id}", goose.Chain(handler.ModifyUser(), options.Middlewares()...))
	router.Handle("PATCH /v1/user/{id}", goose.Chain(handler.UpdateUser(), options.Middlewares()...))
	router.Handle("GET /v1/user/{id}", goose.Chain(handler.GetUser(), options.Middlewares()...))
	router.Handle("GET /v1/users", goose.Chain(handler.ListUser(), options.Middlewares()...))
	return router
}

type userGooseHandler struct {
	service                 UserGooseService
	decoder                 userGooseRequestDecoder
	encoder                 userGooseResponseEncoder
	errorEncoder            goose.ErrorEncoder
	shouldFailFast          bool
	onValidationErrCallback goose.OnValidationErrCallback
}

func (h userGooseHandler) CreateUser() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := h.decoder.CreateUser(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := goose.ValidateRequest(ctx, in, h.shouldFailFast, h.onValidationErrCallback); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.service.CreateUser(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.CreateUser(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

func (h userGooseHandler) DeleteUser() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := h.decoder.DeleteUser(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := goose.ValidateRequest(ctx, in, h.shouldFailFast, h.onValidationErrCallback); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.service.DeleteUser(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.DeleteUser(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

func (h userGooseHandler) ModifyUser() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := h.decoder.ModifyUser(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := goose.ValidateRequest(ctx, in, h.shouldFailFast, h.onValidationErrCallback); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.service.ModifyUser(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.ModifyUser(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

func (h userGooseHandler) UpdateUser() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := h.decoder.UpdateUser(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := goose.ValidateRequest(ctx, in, h.shouldFailFast, h.onValidationErrCallback); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.service.UpdateUser(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.UpdateUser(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

func (h userGooseHandler) GetUser() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := h.decoder.GetUser(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := goose.ValidateRequest(ctx, in, h.shouldFailFast, h.onValidationErrCallback); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.service.GetUser(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.GetUser(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

func (h userGooseHandler) ListUser() http.Handler {
	return http.HandlerFunc(func(writer http.ResponseWriter, request *http.Request) {
		ctx := request.Context()
		in, err := h.decoder.ListUser(ctx, request)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := goose.ValidateRequest(ctx, in, h.shouldFailFast, h.onValidationErrCallback); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		out, err := h.service.ListUser(ctx, in)
		if err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
		if err := h.encoder.ListUser(ctx, writer, out); err != nil {
			h.errorEncoder(ctx, err, writer)
			return
		}
	})
}

type userGooseRequestDecoder struct {
	unmarshalOptions protojson.UnmarshalOptions
}

func (decoder userGooseRequestDecoder) CreateUser(ctx context.Context, r *http.Request) (*CreateUserRequest, error) {
	req := &CreateUserRequest{}
	ok, err := goose.CustomDecodeRequest(ctx, r, req)
	if err != nil {
		return nil, err
	}
	if ok {
		return req, nil
	}
	if err := goose.DecodeRequest(ctx, r, req, decoder.unmarshalOptions); err != nil {
		return nil, err
	}
	return req, nil
}
func (decoder userGooseRequestDecoder) DeleteUser(ctx context.Context, r *http.Request) (*DeleteUserRequest, error) {
	req := &DeleteUserRequest{}
	ok, err := goose.CustomDecodeRequest(ctx, r, req)
	if err != nil {
		return nil, err
	}
	if ok {
		return req, nil
	}
	vars := goose.FormFromPath(r, "id")
	var varErr error
	req.Id, varErr = goose.DecodeForm[int64](varErr, vars, "id", goose.GetInt64)
	if varErr != nil {
		return nil, varErr
	}
	return req, nil
}
func (decoder userGooseRequestDecoder) ModifyUser(ctx context.Context, r *http.Request) (*ModifyUserRequest, error) {
	req := &ModifyUserRequest{}
	ok, err := goose.CustomDecodeRequest(ctx, r, req)
	if err != nil {
		return nil, err
	}
	if ok {
		return req, nil
	}
	if err := goose.DecodeRequest(ctx, r, req, decoder.unmarshalOptions); err != nil {
		return nil, err
	}
	vars := goose.FormFromPath(r, "id")
	var varErr error
	req.Id, varErr = goose.DecodeForm[int64](varErr, vars, "id", goose.GetInt64)
	if varErr != nil {
		return nil, varErr
	}
	return req, nil
}
func (decoder userGooseRequestDecoder) UpdateUser(ctx context.Context, r *http.Request) (*UpdateUserRequest, error) {
	req := &UpdateUserRequest{}
	ok, err := goose.CustomDecodeRequest(ctx, r, req)
	if err != nil {
		return nil, err
	}
	if ok {
		return req, nil
	}
	if req.Item == nil {
		req.Item = &UserItem{}
	}
	if err := goose.DecodeRequest(ctx, r, req.Item, decoder.unmarshalOptions); err != nil {
		return nil, err
	}
	vars := goose.FormFromPath(r, "id")
	var varErr error
	req.Id, varErr = goose.DecodeForm[int64](varErr, vars, "id", goose.GetInt64)
	if varErr != nil {
		return nil, varErr
	}
	return req, nil
}
func (decoder userGooseRequestDecoder) GetUser(ctx context.Context, r *http.Request) (*GetUserRequest, error) {
	req := &GetUserRequest{}
	ok, err := goose.CustomDecodeRequest(ctx, r, req)
	if err != nil {
		return nil, err
	}
	if ok {
		return req, nil
	}
	vars := goose.FormFromPath(r, "id")
	var varErr error
	req.Id, varErr = goose.DecodeForm[int64](varErr, vars, "id", goose.GetInt64)
	if varErr != nil {
		return nil, varErr
	}
	return req, nil
}
func (decoder userGooseRequestDecoder) ListUser(ctx context.Context, r *http.Request) (*ListUserRequest, error) {
	req := &ListUserRequest{}
	ok, err := goose.CustomDecodeRequest(ctx, r, req)
	if err != nil {
		return nil, err
	}
	if ok {
		return req, nil
	}
	queries := r.URL.Query()
	var queryErr error
	req.PageNum, queryErr = goose.DecodeForm[int64](queryErr, queries, "page_num", goose.GetInt64)
	req.PageSize, queryErr = goose.DecodeForm[int64](queryErr, queries, "page_size", goose.GetInt64)
	if queryErr != nil {
		return nil, queryErr
	}
	return req, nil
}

type userGooseResponseEncoder struct {
	marshalOptions      protojson.MarshalOptions
	unmarshalOptions    protojson.UnmarshalOptions
	responseTransformer goose.ResponseTransformer
}

func (encoder userGooseResponseEncoder) CreateUser(ctx context.Context, w http.ResponseWriter, resp *CreateUserResponse) error {
	return goose.EncodeResponse(ctx, w, encoder.responseTransformer(ctx, resp), encoder.marshalOptions)
}
func (encoder userGooseResponseEncoder) DeleteUser(ctx context.Context, w http.ResponseWriter, resp *DeleteUserResponse) error {
	return goose.EncodeResponse(ctx, w, encoder.responseTransformer(ctx, resp), encoder.marshalOptions)
}
func (encoder userGooseResponseEncoder) ModifyUser(ctx context.Context, w http.ResponseWriter, resp *ModifyUserResponse) error {
	return goose.EncodeResponse(ctx, w, encoder.responseTransformer(ctx, resp), encoder.marshalOptions)
}
func (encoder userGooseResponseEncoder) UpdateUser(ctx context.Context, w http.ResponseWriter, resp *UpdateUserResponse) error {
	return goose.EncodeResponse(ctx, w, encoder.responseTransformer(ctx, resp), encoder.marshalOptions)
}
func (encoder userGooseResponseEncoder) GetUser(ctx context.Context, w http.ResponseWriter, resp *GetUserResponse) error {
	return goose.EncodeResponse(ctx, w, encoder.responseTransformer(ctx, resp), encoder.marshalOptions)
}
func (encoder userGooseResponseEncoder) ListUser(ctx context.Context, w http.ResponseWriter, resp *ListUserResponse) error {
	return goose.EncodeResponse(ctx, w, encoder.responseTransformer(ctx, resp), encoder.marshalOptions)
}
