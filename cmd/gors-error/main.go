// Package main is a tool to automate the creation of code init function.
// Inspired by `github.com/golang/tools/cmd/stringer`.
package main

import (
	"flag"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"
)

var (
	typeNames  = flag.String("type", "", "comma-separated list of type names; must be set")
	output     = flag.String("output", "", "output file name; default srcdir/<type>_generated.go")
	trimprefix = flag.String("trimprefix", "", "trim the `prefix` from the generated constant names")
	buildTags  = flag.String("tags", "", "comma-separated list of build tags to apply")
	doc        = flag.Bool("doc", false, "if true only generate error code documentation in markdown format")
	docoutput  = flag.String("docoutput", "", "doc output file name; default srcdir/<type>_generated.md")
)

// Usage is a replacement usage function for the flags package.
func Usage() {
	fmt.Fprintf(os.Stderr, "Usage of codegen:\n")
	fmt.Fprintf(os.Stderr, "\tgors-error [flags] -type T [directory]\n")
	fmt.Fprintf(os.Stderr, "\tgors-error [flags] -type T files... # Must be a single package\n")
	fmt.Fprintf(os.Stderr, "Flags:\n")
	flag.PrintDefaults()
}

func main() {
	log.SetFlags(0)
	log.SetPrefix("gors-error: ")
	flag.Usage = Usage
	flag.Parse()
	if len(*typeNames) == 0 {
		flag.Usage()
		os.Exit(2)
	}
	types := strings.Split(*typeNames, ",")
	var tags []string
	if len(*buildTags) > 0 {
		tags = strings.Split(*buildTags, ",")
	}

	// We accept either one directory or a list of files. Which do we have?
	args := flag.Args()
	if len(args) == 0 {
		// Default: process whole package in current directory.
		args = []string{"."}
	}

	// Parse the package once.
	var dir string
	g := Generator{
		trimPrefix: *trimprefix,
	}
	// TODO(suzmue): accept other patterns for packages (directories, list of files, import paths, etc).
	if len(args) == 1 && isDirectory(args[0]) {
		dir = args[0]
	} else {
		if len(tags) != 0 {
			log.Fatal("-tags option applies only to directories, not when files are specified")
		}
		dir = filepath.Dir(args[0])
	}

	g.parsePackage(dir, args, tags)

	// Run generate for each type.
	var (
		codeSrc []byte
		docSrc  []byte
	)
	for _, typeName := range types {
		// Print the header and package clause.
		g.Printf("// Code generated by \"gors-error -type=int %s\"; DO NOT EDIT.\n", " ")
		g.Printf("package %s", g.pkg.name)
		g.Printf("\n")
		g.Printf("import %s", "\"github.com/go-leo/gors\"\n")
		g.generate(typeName)
		// Format the output.
		codeSrc = g.format()
		if *doc {
			g.buf.Reset()
			g.generateDocs(typeName)
			docSrc = g.buf.Bytes()
		}
	}

	// Write to file.
	codeOutputName := *output
	docOutputName := *docoutput
	if codeOutputName == "" {
		absDir, _ := filepath.Abs(dir)
		baseName := fmt.Sprintf("%s_generated.go", strings.ReplaceAll(filepath.Base(absDir), "-", "_"))
		if len(flag.Args()) == 1 {
			baseName = fmt.Sprintf(
				"%s_generated.go",
				strings.ReplaceAll(filepath.Base(strings.TrimSuffix(flag.Args()[0], ".go")), "-", "_"),
			)
		}
		codeOutputName = filepath.Join(dir, strings.ToLower(baseName))
	}
	if docOutputName == "" {
		absDir, _ := filepath.Abs(dir)
		baseName := fmt.Sprintf("%s_generated.md", strings.ReplaceAll(filepath.Base(absDir), "-", "_"))
		if len(flag.Args()) == 1 {
			baseName = fmt.Sprintf(
				"%s_generated.md",
				strings.ReplaceAll(filepath.Base(strings.TrimSuffix(flag.Args()[0], ".md")), "-", "_"),
			)
		}
		docOutputName = filepath.Join(dir, strings.ToLower(baseName))
	}
	err := ioutil.WriteFile(codeOutputName, codeSrc, 0o600)
	if err != nil {
		log.Fatalf("writing output: %s", err)
	}
	if *doc {
		err = ioutil.WriteFile(docOutputName, docSrc, 0o600)
		if err != nil {
			log.Fatalf("writing output: %s", err)
		}
	}
}

// isDirectory reports whether the named file is a directory.
func isDirectory(name string) bool {
	info, err := os.Stat(name)
	if err != nil {
		log.Fatal(err)
	}

	return info.IsDir()
}
